

--+-- Below is new psuedocode for using the CmdLink and CmdArgv structures --+--


initalize cmdLink
CmdLink.argv = []
input, output, error = default

word:
    is no command:
        Link.argv[0] = lexeme

    else if, need file:
        Link.file = lexeme
    else, error

ALL redir:
    if command present, and no needed file:
        set need file
    else error

semicolon:
    if command present, no files requested:
        reset all flags
        Link.next = NEW LINK

pipe:
    if command present, no files requested, and redirects are sound:
        reset respective flags,
        Link.next = NEW LINK
        Link.output = Link.next
        Link.next.I/O = respective I/O



--+-- Below are previous notes, and psuedocode for the final full shell --+--

- make a real plan for shell
- implement part 1 as if you intend to finish the whole thing
- use some method of maintaining state
    - states: command is, args are, use file or stdin, to file or stdout,
      filename, pipe status, etc.
    - ex: cat file | wc -l | sed ... | grep -h ...
- parser gives a single thing back!
    - gives a val that tells you what type something is, and a ptr to that
      string, MUST string duplicate
    - build a linked list of commands VVVV

never more than one call to fork (children cannot call fork)
    if semicolon, fork command, let the child process call exec

typedef CmdLink;
struct cmdLink
{
    // first element of cmd_argv is the command, now can be treated as an argv
    CmdArgv cmd_argv;
    int cmd_argc;

    // set depending on pipe
    int input, output, error;
    char *infile, *outfile, *errfile;

    struct cmdLink *prev, *next;
}

typdef CmdArgv;
struct cmdArgv {
    char* data, next;
}

int con_struct_er(blah blah blah, pipe_flag)
{
    fill cmd_argv,
    fill out rest of cmdLink, to default stdin, stdout, etc.
        change stdin of 'CmdList' in the main program
        change stdout from HERE!!
}

- only have to free memory in the main program because exec() will clear out
  memory afterwards

- to delete a cmdLink we have to traverse and free (free struct after completing
  whole command)


// free linked list code
while (next not null)
    current = head
    head = head->null;
    for(length of current)
        free(argv[i])
    free(current argv)
    free(current)   


intepretting arguments passed from terminal USE switch

rtnval = parseval(command line);

switch(rtnval):
    case RTNVAL is WORD:
        if (CmdLink->cmd_argc == null) // this is a command

        else if (infile, outfile, errfile == EXISTS) // this is an argument

        else if (infile == is redirect) // this is a filename




